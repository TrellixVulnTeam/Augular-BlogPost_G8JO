{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { mimeType } from \"./mime-type.validator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../posts.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/card\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/progress-spinner\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/button\";\n\nfunction PostCreateComponent_mat_spinner_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\");\n  }\n}\n\nfunction PostCreateComponent_form_2_mat_error_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Please enter a post title\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction PostCreateComponent_form_2_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelement(1, \"img\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r4.imagePreview, i0.ɵɵsanitizeUrl)(\"alt\", ctx_r4.form.value.title);\n  }\n}\n\nfunction PostCreateComponent_form_2_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Please enter a post title\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction PostCreateComponent_form_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 2);\n    i0.ɵɵlistener(\"submit\", function PostCreateComponent_form_2_Template_form_submit_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.onSavePost();\n    });\n    i0.ɵɵelementStart(1, \"mat-form-field\");\n    i0.ɵɵelement(2, \"input\", 3);\n    i0.ɵɵtemplate(3, PostCreateComponent_form_2_mat_error_3_Template, 2, 0, \"mat-error\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\");\n    i0.ɵɵelementStart(5, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function PostCreateComponent_form_2_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r7);\n\n      const _r3 = i0.ɵɵreference(8);\n\n      return _r3.click();\n    });\n    i0.ɵɵtext(6, \"Pick Image\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"input\", 5, 6);\n    i0.ɵɵlistener(\"change\", function PostCreateComponent_form_2_Template_input_change_7_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.onImagePicked($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, PostCreateComponent_form_2_div_9_Template, 2, 2, \"div\", 7);\n    i0.ɵɵelementStart(10, \"mat-form-field\");\n    i0.ɵɵelement(11, \"textarea\", 8);\n    i0.ɵɵtemplate(12, PostCreateComponent_form_2_mat_error_12_Template, 2, 0, \"mat-error\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"button\", 9);\n    i0.ɵɵtext(14, \"Save Post \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.form);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.form.get(\"title\").invalid);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.imagePreview !== \" \" && ctx_r1.imagePreview && ctx_r1.form.get(\"image\").valid);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.form.get(\"content\").invalid);\n  }\n}\n\nexport class PostCreateComponent {\n  constructor(postsService, route) {\n    this.postsService = postsService;\n    this.route = route;\n    this.enteredContent = '';\n    this.enteredTitle = '';\n    this.mode = 'create';\n    this.isLoading = false;\n  }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      'title': new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)]\n      }),\n      'content': new FormControl(null, {\n        validators: [Validators.required]\n      }),\n      'image': new FormControl(null, {\n        validators: [Validators.required],\n        asyncValidators: [mimeType]\n      })\n    });\n    this.route.paramMap.subscribe(paramMap => {\n      if (paramMap.has('postId')) {\n        this.mode = 'edit';\n        this.postId = paramMap.get('postId');\n        this.isLoading = true;\n        this.postsService.getPost(this.postId).subscribe(postData => {\n          this.isLoading = false;\n          this.post = {\n            id: postData._id,\n            title: postData.title,\n            content: postData.content,\n            imagePath: postData.imagePath,\n            creator: postData.creator\n          };\n          this.form.setValue({\n            'title': this.post.title,\n            'content': this.post.content,\n            'image': this.post.imagePath\n          });\n        });\n      } else {\n        this.mode = 'create';\n        this.postId = null;\n      }\n    });\n  }\n\n  onImagePicked(event) {\n    const file = event.target.files[0];\n    this.form.patchValue({\n      image: file\n    });\n    this.form.get('image').updateValueAndValidity();\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      this.imagePreview = reader.result;\n    };\n\n    reader.readAsDataURL(file);\n  }\n\n  onSavePost() {\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.isLoading = true;\n\n    if (this.mode === 'create') {\n      this.postsService.addPost(this.form.value.title, this.form.value.content, this.form.value.image);\n    } else {\n      this.postsService.updatePost(this.postId, this.form.value.title, this.form.value.content, this.form.value.image);\n    }\n\n    this.form.reset();\n  }\n\n}\n\nPostCreateComponent.ɵfac = function PostCreateComponent_Factory(t) {\n  return new (t || PostCreateComponent)(i0.ɵɵdirectiveInject(i1.PostsService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\n\nPostCreateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PostCreateComponent,\n  selectors: [[\"app-post-create\"]],\n  decls: 3,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [3, \"formGroup\", \"submit\", 4, \"ngIf\"], [3, \"formGroup\", \"submit\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"title\", \"placeholder\", \"Post Title\"], [\"mat-stroked-button\", \"\", \"type\", \"button\", 3, \"click\"], [\"type\", \"file\", 3, \"change\"], [\"filePicker\", \"\"], [\"class\", \"image-preview\", 4, \"ngIf\"], [\"matInput\", \"\", \"rows\", \"4\", \"formControlName\", \"content\", \"placeholder\", \"Post Content\"], [\"mat-raised-button\", \"\", \"color\", \"accent\", \"type\", \"submit\"], [1, \"image-preview\"], [3, \"src\", \"alt\"]],\n  template: function PostCreateComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-card\");\n      i0.ɵɵtemplate(1, PostCreateComponent_mat_spinner_1_Template, 1, 0, \"mat-spinner\", 0);\n      i0.ɵɵtemplate(2, PostCreateComponent_form_2_Template, 15, 4, \"form\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n    }\n  },\n  directives: [i3.MatCard, i4.NgIf, i5.MatSpinner, i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.FormGroupDirective, i7.MatFormField, i8.MatInput, i6.DefaultValueAccessor, i6.NgControlStatus, i6.FormControlName, i9.MatButton, i7.MatError],\n  styles: [\"mat-form-field[_ngcontent-%COMP%], textarea[_ngcontent-%COMP%] {\\n    width: 100%\\n}\\n\\nmat-spinner[_ngcontent-%COMP%] {\\n    margin: auto;\\n}\\n\\ninput[type=\\\"file\\\"][_ngcontent-%COMP%] {\\n    visibility: hidden;\\n}\\n\\n.image-preview[_ngcontent-%COMP%] {\\n    height: 5rem;\\n    margin: 1rem 0;\\n}\\n\\n.image-preview[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\n    height: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvc3QtY3JlYXRlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0E7O0lBRUk7QUFDSjs7QUFFQTtJQUNJLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osY0FBYztBQUNsQjs7QUFFQTtJQUNJLFlBQVk7QUFDaEIiLCJmaWxlIjoicG9zdC1jcmVhdGUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5cbm1hdC1mb3JtLWZpZWxkLFxudGV4dGFyZWEge1xuICAgIHdpZHRoOiAxMDAlXG59XG5cbm1hdC1zcGlubmVyIHtcbiAgICBtYXJnaW46IGF1dG87XG59XG5cbmlucHV0W3R5cGU9XCJmaWxlXCJdIHtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG59XG5cbi5pbWFnZS1wcmV2aWV3IHtcbiAgICBoZWlnaHQ6IDVyZW07XG4gICAgbWFyZ2luOiAxcmVtIDA7XG59XG5cbi5pbWFnZS1wcmV2aWV3IGltZyB7XG4gICAgaGVpZ2h0OiAxMDAlO1xufSJdfQ== */\"]\n});","map":{"version":3,"sources":["/Users/binlinchen/Documents/GitHub/Augular-BlogPost/src/app/posts/post-create/post-create.component.ts","/Users/binlinchen/Documents/GitHub/Augular-BlogPost/src/app/posts/post-create/post-create.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute, ParamMap } from \"@angular/router\";\nimport { Post } from \"../post.model\";\nimport { mimeType } from \"./mime-type.validator\";\n\nimport { PostsService } from \"../posts.service\"\nimport { Subscription } from \"rxjs\";\n\n@Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.css']\n})\nexport class PostCreateComponent implements OnInit {\n  enteredContent = '';\n  enteredTitle = '';\n  private mode = 'create';\n  private postId: string;\n  private authStatusSub: Subscription;\n  form: FormGroup\n  imagePreview: string;\n  post: Post;\n  isLoading = false;\n\n\n\n  constructor(public postsService : PostsService , public route: ActivatedRoute, ) {}\n\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      'title': new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)]\n      }),\n      'content': new FormControl(null, {\n        validators: [Validators.required]\n      }),\n      'image': new FormControl(null, {\n        validators: [Validators.required], asyncValidators: [mimeType]\n      })\n    });\n    this.route.paramMap.subscribe((paramMap : ParamMap) => {\n        if(paramMap.has('postId')){\n            this.mode = 'edit';\n            this.postId = paramMap.get('postId');\n            this.isLoading = true;\n            this.postsService.getPost(this.postId).subscribe(postData =>{\n              this.isLoading = false;\n              this.post = { id: postData._id, title: postData.title, content: postData.content, imagePath: postData.imagePath, creator: postData.creator };\n              this.form.setValue({\n                'title' : this.post.title,\n                'content' : this.post.content,\n                'image' : this.post.imagePath\n              });\n\n            });\n        } else {\n          this.mode = 'create';\n          this.postId = null;\n        }\n    });\n  }\n\n  onImagePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files[0];\n    this.form.patchValue({image: file});\n    this.form.get('image').updateValueAndValidity();\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.imagePreview = reader.result as string;\n    };\n    reader.readAsDataURL(file);\n\n  }\n\n  onSavePost(){\n    if(this.form.invalid){\n      return;\n    }\n\n    this.isLoading = true;\n    if(this.mode ==='create'){\n      this.postsService.addPost(this.form.value.title, this.form.value.content, this.form.value.image);\n      \n    }else{\n      this.postsService.updatePost(this.postId, this.form.value.title, this.form.value.content, this.form.value.image);\n    }\n    this.form.reset();\n  }\n}\n","\n<mat-card>\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n    <form [formGroup] = \"form\" (submit)=\"onSavePost()\"    *ngIf=\"!isLoading\">\n        <mat-form-field>\n                <input \n                matInput \n                type=\"text\"\n                formControlName=\"title\"\n                placeholder=\"Post Title\" >\n                <mat-error *ngIf=\"form.get('title').invalid\">Please enter a post title</mat-error>\n            </mat-form-field>\n            <div>\n                <button mat-stroked-button type=\"button\" (click) =\"filePicker.click()\">Pick Image</button>\n                <input type=\"file\" #filePicker (change)=\"onImagePicked($event)\">\n            </div>\n\n            <div class=\"image-preview\" *ngIf=\"imagePreview !== ' ' && imagePreview && form.get('image').valid\">\n                <img [src]=\"imagePreview\" [alt]=\"form.value.title\">\n            </div>\n\n            <mat-form-field>\n                <textarea\n                 matInput \n                 rows=\"4\"\n                 formControlName=\"content\"\n                 placeholder=\"Post Content\"\n                 ></textarea>\n                 <mat-error *ngIf=\"form.get('content').invalid\">Please enter a post title</mat-error>\n            </mat-form-field>\n            <button \n                mat-raised-button\n                color=\"accent\"\n                type=\"submit\">Save Post\n            </button>\n    </form>\n  \n</mat-card>\n\n\n\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}