{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { mimeType } from \"./mime-type.validator\";\nlet PostCreateComponent = class PostCreateComponent {\n  constructor(postsService, route, authService) {\n    this.postsService = postsService;\n    this.route = route;\n    this.enteredContent = '';\n    this.enteredTitle = '';\n    this.mode = 'create';\n    this.isLoading = false;\n  }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      'title': new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)]\n      }),\n      'content': new FormControl(null, {\n        validators: [Validators.required]\n      }),\n      'image': new FormControl(null, {\n        validators: [Validators.required],\n        asyncValidators: [mimeType]\n      })\n    });\n    this.route.paramMap.subscribe(paramMap => {\n      if (paramMap.has('postId')) {\n        this.mode = 'edit';\n        this.postId = paramMap.get('postId');\n        this.isLoading = true;\n        this.postsService.getPost(this.postId).subscribe(postData => {\n          this.isLoading = false;\n          this.post = {\n            id: postData._id,\n            title: postData.title,\n            content: postData.content,\n            imagePath: postData.imagePath,\n            creator: postData.creator\n          };\n          this.form.setValue({\n            'title': this.post.title,\n            'content': this.post.content,\n            'image': this.post.imagePath\n          });\n        });\n      } else {\n        this.mode = 'create';\n        this.postId = null;\n      }\n    });\n  }\n\n  onImagePicked(event) {\n    const file = event.target.files[0];\n    this.form.patchValue({\n      image: file\n    });\n    this.form.get('image').updateValueAndValidity();\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      this.imagePreview = reader.result;\n    };\n\n    reader.readAsDataURL(file);\n  }\n\n  onSavePost() {\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.isLoading = true;\n\n    if (this.mode === 'create') {\n      this.postsService.addPost(this.form.value.title, this.form.value.content, this.form.value.image);\n    } else {\n      this.postsService.updatePost(this.postId, this.form.value.title, this.form.value.content, this.form.value.image);\n    }\n\n    this.form.reset();\n  }\n\n};\nPostCreateComponent = __decorate([Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.css']\n})], PostCreateComponent);\nexport { PostCreateComponent };","map":{"version":3,"sources":["/Users/binlinchen/Documents/GitHub/Augular-BlogPost/src/app/posts/post-create/post-create.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute, ParamMap } from \"@angular/router\";\nimport { Post } from \"../post.model\";\nimport { mimeType } from \"./mime-type.validator\";\n\nimport { PostsService } from \"../posts.service\"\nimport { Subscription } from \"rxjs\";\n\n@Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.css']\n})\nexport class PostCreateComponent implements OnInit {\n  enteredContent = '';\n  enteredTitle = '';\n  private mode = 'create';\n  private postId: string;\n  private authStatusSub: Subscription;\n  form: FormGroup\n  imagePreview: string;\n  post: Post;\n  isLoading = false;\n\n\n\n  constructor(public postsService : PostsService , public route: ActivatedRoute, authService) {}\n\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      'title': new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)]\n      }),\n      'content': new FormControl(null, {\n        validators: [Validators.required]\n      }),\n      'image': new FormControl(null, {\n        validators: [Validators.required], asyncValidators: [mimeType]\n      })\n    });\n    this.route.paramMap.subscribe((paramMap : ParamMap) => {\n        if(paramMap.has('postId')){\n            this.mode = 'edit';\n            this.postId = paramMap.get('postId');\n            this.isLoading = true;\n            this.postsService.getPost(this.postId).subscribe(postData =>{\n              this.isLoading = false;\n              this.post = { id: postData._id, title: postData.title, content: postData.content, imagePath: postData.imagePath, creator: postData.creator };\n              this.form.setValue({\n                'title' : this.post.title,\n                'content' : this.post.content,\n                'image' : this.post.imagePath\n              });\n\n            });\n        } else {\n          this.mode = 'create';\n          this.postId = null;\n        }\n    });\n  }\n\n  onImagePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files[0];\n    this.form.patchValue({image: file});\n    this.form.get('image').updateValueAndValidity();\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.imagePreview = reader.result as string;\n    };\n    reader.readAsDataURL(file);\n\n  }\n\n  onSavePost(){\n    if(this.form.invalid){\n      return;\n    }\n\n    this.isLoading = true;\n    if(this.mode ==='create'){\n      this.postsService.addPost(this.form.value.title, this.form.value.content, this.form.value.image);\n      \n    }else{\n      this.postsService.updatePost(this.postId, this.form.value.title, this.form.value.content, this.form.value.image);\n    }\n    this.form.reset();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}